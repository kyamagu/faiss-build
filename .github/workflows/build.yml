name: Build
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  release:
    types: [published]

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # - os: ubuntu-24.04
          #   opt_level: avx512
          # - os: ubuntu-24.04-arm
          #   opt_level: sve
          # - os: macos-13
          #   opt_level: avx2
          # - os: macos-14
          #   opt_level: generic
          # - os: windows-2022
          #   opt_level: avx2
          - os: windows-11-arm
            opt_level: generic
    steps:
      - uses: actions/checkout@v5
        with:
          submodules: true
      # NOTE: You may skip this step for using the standard MSBuild setup, but necessary for ClangCL.
      - name: Setup MSVC environment
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{ matrix.os == 'windows-11-arm' && 'arm64' || 'x64' }}
        if: runner.os == 'Windows'
      - name: Install OpenBLAS
        run: bash scripts/install_OpenBLAS_Windows.sh
        if: runner.os == 'Windows'
      - name: Build wheels
        uses: pypa/cibuildwheel@v3.1.4
        env:
          # NOTE: CMAKE_BUILD_TYPE=Release removes debugging symbols.
          # TODO: Isolate platform-specific environment setup in a separate step.
          CIBW_ENVIRONMENT_LINUX: >
            SKBUILD_CMAKE_DEFINE="FAISS_OPT_LEVEL=${{ matrix.opt_level }}"
          # NOTE: On Windows, setting SKBUILD_WHEEL_PY_API results in broken DLLs.
          # NOTE: You may set CMAKE_GENERATOR_TOOLSET=ClangCL, but results in broken DLLs on ARM64.
          CIBW_ENVIRONMENT_WINDOWS: >
            SKBUILD_CMAKE_DEFINE="FAISS_OPT_LEVEL=${{ matrix.opt_level }}"
          CIBW_ENVIRONMENT_MACOS: >
            SKBUILD_CMAKE_DEFINE="FAISS_OPT_LEVEL=${{ matrix.opt_level }}"
            MACOSX_DEPLOYMENT_TARGET=${{ matrix.os == 'macos-13' && '13.0' || '14.0' }}
          CIBW_BEFORE_ALL: bash scripts/before_${{ runner.os }}.sh
      - uses: actions/upload-artifact@v4
        with:
          name: wheel-${{ matrix.os }}
          path: ./wheelhouse/*.whl

  build_cuda_wheels:
    name: Build CUDA wheels
    runs-on: ubuntu-24.04
    if: false
    steps:
      - uses: actions/checkout@v5
        with:
          submodules: true
      - name: Build wheels
        uses: pypa/cibuildwheel@v3.1.4
        env:
          CIBW_BUILD: cp3*-manylinux_x86_64
          CIBW_ENVIRONMENT: >
            FAISS_ENABLE_GPU=ON
          CIBW_BEFORE_ALL: bash scripts/before_Linux.sh